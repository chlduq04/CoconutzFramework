coconutQuery.java
package com.coconutz.DriverRef.DB;

import java.util.StringTokenizer;

public class CoconutQuery {
	private StringBuffer query;
	public CoconutQuery(){
		query = new StringBuffer();
	}
	public CoconutQuery( StringBuffer argu ){
		query = argu;
	}
	public CoconutQuery( String argu ){
		query = new StringBuffer();
		query.append(argu);
	}
	public String getQuery( ){
		String argu = query.toString().trim();
		query_reset();
		return argu;
	}
	public void query_reset(){
		query.delete(0, query.length());
	}
	public void setQuery( String argu ){
		query_reset();
		query.append( argu );
	}
	private String[] Stringtoken( String argu ){
		StringTokenizer m = new StringTokenizer(argu, ",");
		String value[] = new String[m.countTokens()];
		int i=0;
		while(m.hasMoreElements()){
			value[i++] = m.nextToken().trim();
		}
		return value;
	}	
	/*--select--*/
	/**Make Selct Query
	 * ex)
	 * select("table, name, argu")
	 * -> "SELECT table, name, argu"
	 * **/
	public CoconutQuery select(String argu){
		return select(Stringtoken(argu));
	}
	public CoconutQuery select(String argu[]){
		String result = "SELECT ";
		for(int i=0;i<argu.length;i++){
			if(  i == argu.length-1 )
				result += argu[i];
			else
				result += argu[i] +",";
		}
		result += " ";
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery select_max( String argu ){
		String result = "SELECT MAX("+argu+") as" + argu +" " + query;
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery select_max( String argu, String as ){
		String result = "SELECT MAX("+argu+") as" + as +" " + query;		
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery select_min( String argu ){
		String result = "SELECT MIN("+argu+") as" + argu +" " + query;;
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery select_min( String argu, String as ){
		String result = "SELECT MIN("+argu+") as" + as +" " + query;
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery select_sum( String argu ){
		String result = "SELECT SUM("+argu+") as" + query;
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery select_sum( String argu ,String as){
		String result ="SELECT SUM("+argu+") as" + as +" " + query; 
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--from--*/
	public CoconutQuery from( String argu ){
		String result = "FROM " + argu +" ";
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--join--*/
	public CoconutQuery join( String argu, String as ){
		String result = "JOIN " + argu +" ON "+ as +" ";
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery join( String argu, String as, String option ){
		String result = option +"JOIN " + argu +" ON "+ as +" ";;
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--where--*/
	public CoconutQuery where( boolean where, String argu, String value ){
		return where(where,Stringtoken(argu),Stringtoken(value));
	}
	public CoconutQuery where( boolean where, String argu[], String value[] ){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "AND ";			
		for( int i=0 ; i < argu.length ; i++ ){
			if( i != argu.length-1 )
				result += argu[i] +" = '" + value[i] + "' AND ";
			else
				result += argu[i] +" = '" + value[i] + "' ";				
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--or_where--*/
	public CoconutQuery or_where(boolean where, String argu, String value ){
		return or_where(where, Stringtoken(argu),Stringtoken(value));
	}
	public CoconutQuery or_where( boolean where, String argu[], String value[] ){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "OR ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i != argu.length-1 )
				result += argu[i] +" = '" + value[i] + "' OR ";
			else
				result += argu[i] +" = '" + value[i] + "' ";				
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--or_where_in--*/
	public CoconutQuery or_where_in( boolean where, String argu, String value ){
		return or_where_in(where, argu, Stringtoken(value));
	}
	public CoconutQuery or_where_in( boolean where, String argu, String value[] ){
		String result;
		if(where)
			result = "WHERE " + argu + " IN (";
		else
			result = "OR " + argu + " IN (";
		for( int i=0 ; i < value.length ; i++ ){
			if( i == value.length - 1 )
				result += value[i] + ")";
			else
				result += value[i] + ", ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--where_not_in--*/
	public CoconutQuery wehre_not_in( boolean where, String argu, String value ){
		return where_not_in(where, argu, Stringtoken(value));
	}
	public CoconutQuery where_not_in( boolean where, String argu, String value[] ){
		String result;
		if(where)
			result = "WHERE " + argu + " NOT IN (";
		else
			result = "AND " + argu + " NOT IN (";
		for( int i=0 ; i < value.length ; i++ ){
			if( i == value.length - 1 )
				result += value[i] + ")";
			else
				result += value[i] + ", ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--or_where_not_in--*/
	public CoconutQuery or_where_not_in( boolean where, String argu, String value ){
		return or_where_not_in(where, argu, Stringtoken(value));
	}
	public CoconutQuery or_where_not_in( boolean where, String argu, String value[] ){
		String result;
		if(where)
			result = "WHERE " + argu + " NOT IN (";
		else
			result = "OR " + argu + " NOT IN (";
		for( int i=0 ; i < value.length ; i++ ){
			if( i == value.length - 1 )
				result += value[i] + ")";
			else
				result += value[i] + ", ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	/*--like--*/
	public CoconutQuery like( boolean where, String argu, String value ){
		return like(where, Stringtoken(argu), Stringtoken(value));
	}
	public CoconutQuery like( boolean where, String argu[], String value[] ){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "AND ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i != argu.length-1 )
				result += argu[i] +" = ' LIKE %" + value[i] + "% ' AND ";
			else
				result += argu[i] +" = ' LIKE %" + value[i] + "% ' ";				
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery like( boolean where, String argu, String value ,String option){
		return like(where, Stringtoken(argu), Stringtoken(value),option);
	}
	public CoconutQuery like( boolean where, String argu[], String value[],String option ){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "AND ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i == argu.length-1 ){
				if( option.equals("before") )
					result +=  argu[i]+"LIKE " +"%"+value[i] +" ";
				else if( option.equals("after") )
					result += argu[i]+"LIKE " + value[i]+"% ";
				else if( option.equals("both") )
					result += argu[i]+"LIKE " +"%"+ value[i] + "% ";		
				else
					result += argu[i]+"LIKE " + value[i] +" ";
			}else{
				if( option.equals("before") )
					result += argu[i]+"LIKE " +"%"+value[i] + " AND ";
				else if( option.equals("after") )
					result += argu[i]+"LIKE " + value[i]+"%" + " AND ";
				else if( option.equals("both") )
					result += argu[i]+"LIKE " +"%"+ value[i] + "%" + " AND ";		
				else
					result += argu[i]+"LIKE " + value[i] + " AND ";			
			}
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	
	/*--or_like--*/
	public CoconutQuery or_like( boolean where, String argu, String value ){
		return or_like(where, Stringtoken(argu), Stringtoken(value));
	}
	public CoconutQuery or_like( boolean where, String argu[],String value[]){
		String result;
		if(where)
			result = "WHERE ";
		else
			result = "OR ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i != argu.length-1 )
				result += argu[i] +" = ' LIKE %" + value[i] + "% ' OR ";
			else
				result += argu[i] +" = ' LIKE %" + value[i] + "% ' ";				
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery or_like( boolean where, String argu,String value,String option){
		return or_like(where, Stringtoken(argu), Stringtoken(value), option);
	}
	public CoconutQuery or_like( boolean where,String argu[],String value[],String option){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "OR ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i == argu.length-1 ){
				if( option.equals("before") )
					result +=  argu[i]+"LIKE " +"%"+value[i] +" ";
				else if( option.equals("after") )
					result += argu[i]+"LIKE " + value[i]+"% ";
				else if( option.equals("both") )
					result += argu[i]+"LIKE " +"%"+ value[i] + "% ";		
				else
					result += argu[i]+"LIKE " + value[i] +" ";
			}else{
				if( option.equals("before") )
					result += argu[i]+"LIKE " +"%"+value[i] + " OR ";
				else if( option.equals("after") )
					result += argu[i]+"LIKE " + value[i]+"%" + " OR ";
				else if( option.equals("both") )
					result += argu[i]+"LIKE " +"%"+ value[i] + "%" + " OR ";		
				else
					result += argu[i]+"LIKE " + value[i] + " OR ";			
			}
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery not_like( boolean where,String argu,String value){
		return not_like(where, Stringtoken(argu), Stringtoken(value));
	}
	public CoconutQuery not_like( boolean where,String argu[],String value[]){
		String result;
		if(where)
			result = "WHERE ";
		else
			result = "AND ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i != argu.length-1 )
				result += argu[i] +" = ' NOT LIKE %" + value[i] + "% ' AND ";
			else
				result += argu[i] +" = ' NOT LIKE %" + value[i] + "% ' ";				
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery not_like( boolean where,String argu,String value,String option){
		return not_like(where, Stringtoken(argu), Stringtoken(value),option);
	}
	public CoconutQuery not_like( boolean where,String argu[],String value[],String option){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "AND ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i == argu.length-1 ){
				if( option.equals("before") )
					result +=  argu[i]+"NOT LIKE " +"%"+value[i] +" ";
				else if( option.equals("after") )
					result += argu[i]+"NOT LIKE " + value[i]+"% ";
				else if( option.equals("both") )
					result += argu[i]+"NOT LIKE " +"%"+ value[i] + "% ";		
				else
					result += argu[i]+"NOT LIKE " + value[i] +" ";
			}else{
				if( option.equals("before") )
					result += argu[i]+"NOT LIKE " +"%"+value[i] + " AND ";
				else if( option.equals("after") )
					result += argu[i]+"NOT LIKE " + value[i]+"%" + " AND ";
				else if( option.equals("both") )
					result += argu[i]+"NOT LIKE " +"%"+ value[i] + "%" + " AND ";		
				else
					result += argu[i]+"NOT LIKE " + value[i] + " AND ";			
			}
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery or_not_like( boolean where, String argu,String value){
		return or_not_like(where, Stringtoken(argu), Stringtoken(value));
	}
	public CoconutQuery or_not_like( boolean where, String argu[],String value[]){
		String result;
		if(where)
			result = "WHERE ";
		else
			result = "OR ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i != argu.length-1 )
				result += argu[i] +" = ' NOT LIKE %" + value[i] + "% ' AND ";
			else
				result += argu[i] +" = ' NOT LIKE %" + value[i] + "% ' ";				
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery or_not_like( boolean where, String argu,String value,String option){
		return or_not_like(where, Stringtoken(argu), Stringtoken(value),option);
	}
	public CoconutQuery or_not_like( boolean where, String argu[],String value[],String option){
		String result;
		if( where )
			result = "WHERE ";
		else
			result = "OR ";
		for( int i=0 ; i < argu.length ; i++ ){
			if( i == argu.length-1 ){
				if( option.equals("before") )
					result +=  argu[i]+"NOT LIKE " +"%"+value[i] +" ";
				else if( option.equals("after") )
					result += argu[i]+"NOT LIKE " + value[i]+"% ";
				else if( option.equals("both") )
					result += argu[i]+"NOT LIKE " +"%"+ value[i] + "% ";		
				else
					result += argu[i]+"NOT LIKE " + value[i] +" ";
			}else{
				if( option.equals("before") )
					result += argu[i]+"NOT LIKE " +"%"+value[i] + " OR ";
				else if( option.equals("after") )
					result += argu[i]+"NOT LIKE " + value[i]+"%" + " OR ";
				else if( option.equals("both") )
					result += argu[i]+"NOT LIKE " +"%"+ value[i] + "%" + " OR ";		
				else
					result += argu[i]+"NOT LIKE " + value[i] + " OR ";			
			}
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery group_by( String argu ){
		return group_by(Stringtoken(argu));
	}
	public CoconutQuery group_by( String argu[]){
		String result = "GROUP BY " ;
		for(int i=0;i<argu.length;i++){
			if( i != argu.length -1 )
				result += argu[i] + " , ";
			else
				result += argu[i] + " ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public void distinct(){
		String value = "SELECT";
		int check=-1;
		for( int i=-1 ; (i = query.indexOf(value, i+1)) != -1 ; ){
			check = i+value.length();
		}
		if(check > 0){
			query.replace(0, query.length(), query.substring(0, check) + " DISTINCT" + query.substring(check,query.length()));
		}
	}
	public CoconutQuery having(  String value, boolean escape ){
		return having(Stringtoken(value), escape);
	}
	public CoconutQuery having( String value[], boolean escape ){
		String result = "HAVING ";
		for(int i=0;i<value.length;i++){
			if( i == value.length )
				result += value[i]+ " ";
			else
				result += value[i]+ " , ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery or_having( String value, boolean escape ){
		return or_having(Stringtoken(value), escape);
	}
	public CoconutQuery or_having( String value[], boolean escape ){
		String result = "HAVING ";
		for(int i=0;i<value.length;i++){
			if( i == value.length )
				result += value[i]+ " ";
			else
				result += value[i]+ " OR ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery order_by( String argu, String order_option ){
		return order_by(Stringtoken(argu), Stringtoken(order_option));
	}
	public CoconutQuery order_by( String argu[], String order_option[] ){
		String result = "ORDER BY ";		
		for(int i=0;i<argu.length;i++){
			if( i == argu.length-1 )
				result += " "+ argu[i] +" "+order_option[i] +" ";
			else
				result += " "+ argu[i] +" "+order_option[i] +", ";
		}
		query.append(result);
		return new CoconutQuery( query );
	}
	
	public CoconutQuery limit(int limit){
		String result = "LIMIT "+limit+" ";
		query.append(result);
		return new CoconutQuery( query );
	}
	public CoconutQuery limit(int limit, int offset){
		String result = "LIMIT "+limit+" "+offset+" ";
		query.append(result);
		return new CoconutQuery( query );
	}	
	public void insert( String table, String argu, String value ){
		insert(table, Stringtoken(argu), Stringtoken(value));
	}
	public void insert( String table, String argu[], String value[] ){
		String result = "INSERT INTO " + table + "(";
		for( int i=0 ; i<argu.length ; i++ ){
			if( i == argu.length-1 )
				result += " "+ argu[i] + ") VALUES (";
			else
				result += " "+argu[i] + ", ";
		}
		for( int i=0; i<value.length ; i++){
			if( i == argu.length-1 )
				result += " '"+ value[i] + "') ";
			else
				result += " '"+ value[i] + "', ";			
		}
		query.append(result);
	}
	public void insert( String table, String argu[], String value[][] ){
		String result = "INSERT INTO " + table + "(";
		for( int i=0 ; i<argu.length ; i++ ){
			if( i == argu.length-1 )
				result += " "+ argu[i] + ") VALUES ";
			else
				result += " "+argu[i] + ", ";
		}
		for (int i = 0; i < value.length; i++) {
			result += " ( ";
			for( int j = 0; j < value[i].length ; j++){
				if( j == value[i].length-1 )
					result += " '"+ value[j] + "'  ";
				else
					result += " '"+ value[j] + "', ";			
			}		
			
			if( i == value.length-1 )
				result += ") ";
			else
				result += "), ";
		}
		query.append(result);
	}
	/**coconut ci - insert**/
	public void set(){}
	/**coconut ci - insert batch**/	
	public void insert_batch(String table, String argu, String value){
		insert(table, argu, value);
		//+ escape
	}
	/**coconut ci - insert batch**/	
	public void insert_batch(String table, String argu[], String value[]){
		insert(table, argu, value);
		//+ escape
	}
	/**coconut ci - insert batch**/	
	public void insert_batch(String table, String argu[], String value[][]){
		insert(table, argu, value);
		//+ escape
	}
	/**coconut ci - update**/		
	public void update( String table,String argu, String value ){
	}
	/**coconut ci - update**/		
	public void update( String table,String argu[], String value[] ){
	}
	/**coconut ci - update_batch**/		
	public void update_batch( String table, String argu, String value ){
		update(table, argu, value);
		//+ escape
	}
	/**coconut ci - update_batch**/		
	public void update_batch( String table, String argu[], String value[] ){
		update(table, argu, value);
		//+ escape
	}
	/**coconut ci - delete**/		
	public void delete( String table ){}
	/**coconut ci - delete**/		
	public void delete( String table, String where ){}
	/**coconut ci - delete**/		
	public void delete( String table[] ){}
	/**coconut ci - count_all**/
	public int count_all( String argu ){
		int result = 0;
		return result;
	}
	/**coconut ci - count_all_result**/
	public int count_all_result( String argu ){
		int result =0;
		return result;
	}
	/**coconut ci - escape**/
	public String escape( String argu ){
		return argu;
	}
	
}
