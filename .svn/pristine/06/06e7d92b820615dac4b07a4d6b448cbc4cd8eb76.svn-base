package com.coconutz.Server;

import java.io.Console;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.coconutz.Coconut;
import com.coconutz.CoconutParameter;
import com.coconutz.G;
import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

public class ServerHandler implements HttpHandler {

	public static Map<String, Object> usedClassList = new HashMap<String, Object>();

	public void handle(HttpExchange xchg) throws IOException {

		if ( xchg.getRequestMethod().compareTo("POST") == 0 ) {
			
			//System.out.println("method : " + xchg.getRequestMethod());	//type get/post			
			checkAjaxOrForm(xchg);
		}
	}
	public void checkAjaxOrForm(HttpExchange xchg) throws IOException{
		Coconut responseCoconut = null;
		
		// 헤더 가져오기
		Headers headers = xchg.getRequestHeaders();
		Set<Map.Entry<String, List<String>>> entries = headers.entrySet();

		StringBuffer request = new StringBuffer();
		for (Map.Entry<String, List<String>> entry : entries) {
			request.append(entry.toString() + "\n");	
		}
		
		// 바운더리 구분자 찾기
		int boundary_index = request.lastIndexOf("[multipart/form-data; boundary=");
		
		if (boundary_index == -1){
			//-1 post json ajax
			boundary_index = request.lastIndexOf("[application/x-www-form-urlencoded;");
			AjaxHandler ajaxHandler = new AjaxHandler();
			if (boundary_index != -1) {
				//ajax post json데이터만 들어있음
				
				System.out.println("Ajax request");
				JSONObject requestJson = ajaxHandler.getAjaxJson( xchg );

				responseCoconut = callFunction(requestJson);
								
				if (G.DEBUG) { G.debugPrint("call Function return String : " + responseCoconut.getString()); }
			}
			ajaxHandler.responseAjax(xchg, responseCoconut);
		}
		else {
			// != -1 Form File data

			String boundary_str = request.substring(boundary_index+31);
			boundary_index = boundary_str.indexOf("]");
			boundary_str = boundary_str.substring(0, boundary_index);
			
			ArrayList<HashMap<String, String>> formData = new ArrayList<HashMap<String, String>>();
			FormHandler formHandler = new FormHandler();

			System.out.println("Form post request");
			formData = formHandler.getFormData(xchg, "--"+boundary_str);
			JSONObject requestJson = arraytoJson(formData);
			
			responseCoconut = callFunction(requestJson);
			if (G.DEBUG) { G.debugPrint("call Function return String : " + responseCoconut.getString()); }

			formHandler.responseForm(xchg, responseCoconut, boundary_str);
		}
		
		/*if ( returnStr == null ) {
			returnStr = "{ \"result\" : \"fail\" }";
			returnJSON = new JSONObject(returnStr);
		} else {
			returnJSON = new JSONObject(returnStr);
		}*/
		
	}

	public Coconut callFunction( JSONObject json ) {
		
		Coconut result = null;
		
		/*
		 * daemon, function 등 필수요소 확인 후 처리하기
		 */
		
		CoconutParameter cp = makeParameter(json);
		//if (G.DEBUG) { G.debugPrint(cp.toString()); }
		try {
			for ( Entry<String, Object> entry : ServerHandler.usedClassList.entrySet() ) {
					if ( entry.getKey().compareTo( (String) json.get("class") ) == 0 ) {
						System.out.println("class : " + entry.getKey() + " find");
						result = invoke(entry.getValue(), (String) json.get("function"), cp );
						break;
					}
			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (result == null) {
			try {
				result = new Coconut(new JSONObject("{\"error\":\"wrong service or daemon\"}"));
			} catch (JSONException e) {
				e.printStackTrace();
				result = null;
			}
		}
		
		try {
			switch ((String)json.get("returntype")){
			case "json":
				result.setReturnType("json");
				break;
			case "xml":
				result.setReturnType("xml");
				break;
			case "raw":
				result.setReturnType("raw");
				break;
			case "html":
				result.setReturnType("html");
				break;
			default:
				result.setReturnType("json");
				break;
			}
		} catch (JSONException e) {
			result.setReturnType("json");
		}
		
		return result;
	}
	
	private JSONObject arraytoJson(ArrayList<HashMap<String, String>> al) {

		JSONObject jsonObject = new JSONObject();
		JSONObject param = new JSONObject();

		Iterator<HashMap<String, String>> it = al.iterator();
		HashMap<String, String> hashmap;
		while (it.hasNext()) {
			hashmap = it.next();
			try {
				boolean check = false;
				String name = hashmap.get("name");
				name = name.replace("\"", "");
				if ( name.compareTo("user") == 0 ) {
					jsonObject.put("user", (String)hashmap.get("value"));
					check = true;
				}
				if ( name.compareTo("class") == 0 ) {
					jsonObject.put("class", (String)hashmap.get("value"));
					check = true;
				}
				if ( name.compareTo("function") == 0 ) {
					jsonObject.put("function", (String)hashmap.get("value"));
					check = true;
				}
				if ( !check ){
					String paramName = "";
					String paramValue = "";
					for (Entry<String,String> entry : hashmap.entrySet()) {
						if (entry.getKey().compareTo("name") == 0) {
							paramName = entry.getValue();
							paramName = paramName.replace("\"", "");
						}
						if (entry.getKey().compareTo("value") == 0) {
							paramValue = entry.getValue();
							paramValue = paramValue.replace("\"", "");
						}
					}
					if (paramName.length() != 0 && paramValue.length() != 0) {
						param.put(paramName, (String)paramValue);
					}		
				}
			} catch (org.json.JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (param.length() != 0) {
			try {
				jsonObject.put("parameter", param);
			} catch (org.json.JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return jsonObject;
	}
	
	/**
	 * 특정 클래스의 내용을 invoke
	 * 
	 * @param obj
	 *            Method Invoke할 오브젝트
	 * @param methodName
	 *            Method Name
	 * @param object
	 *            Parameter Object List
	 * @return
	 */
	public static Coconut invoke(Object obj, String methodName, Object object) {
		Method[] methods = obj.getClass().getMethods();

		for (int i = 0; i < methods.length; i++) {
			if (methods[i].getName().equals(methodName)) {
				try {
					System.out.println("function : " + methodName + " call");
					if (methods[i].getReturnType().getName().equals("void")) {
						return (Coconut) methods[i].invoke(obj, object);
					} else {
						return (Coconut)methods[i].invoke( obj, object );
					}
				} catch (IllegalAccessException lae) {
					System.out.println("LAE : " + lae.getMessage());
				} catch (InvocationTargetException ite) {
					System.out.println("ITE : " + ite.getMessage());
				}
			}
		}
		return null;
	}

	public static Coconut invoke(Object obj, String methodName, Object[] object) {
		Method[] methods = obj.getClass().getMethods();

		for (int i = 0; i < methods.length; i++) {
			if (methods[i].getName().equals(methodName)) {
				try {
					System.out.println("function : " + methodName + " call");
					if (methods[i].getReturnType().getName().equals("void")) {
						return (Coconut)methods[i].invoke(obj, object);
					} else {
						methods[i].getParameterAnnotations();
						return (Coconut)methods[i].invoke( obj, object );
					}
				} catch (IllegalAccessException lae) {
					System.out.println("LAE : " + lae.getMessage());
				} catch (InvocationTargetException ite) {
					System.out.println("ITE : " + ite.getMessage());
				}
			}
		}
		return null;
	}

	public CoconutParameter makeParameter(JSONObject json)
	{
		// parameter 없을 경우
		Object parametertest = null;
		JSONObject parameter = null;
		JSONArray parameterArray = null;
		try {
			parameter = (JSONObject) json.get("parameter");
		} catch (JSONException e1) {
			try {
				parameter = new JSONObject("{\"empty\":\"empty\"}");
			} catch (JSONException e) {
				e.printStackTrace();
			}				
		} catch(Exception e){
			try{
				parameterArray = json.getJSONArray("parameter");
				return new CoconutParameter(parameterArray);				
			}
			catch(JSONException e2){
			}

		}
		if (G.DEBUG) { G.debugPrint("parameter : " + parameter.toString()); }

		return new CoconutParameter(parameter);
	}
	
}

